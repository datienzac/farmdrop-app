package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.ProducerData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCER_DATA.
*/
public class ProducerDataDao extends AbstractDao<ProducerData, Long> {

    public static final String TABLENAME = "PRODUCER_DATA";

    /**
     * Properties of entity ProducerData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProducerId = new Property(1, long.class, "producerId", false, "PRODUCER_ID");
        public final static Property ProducerName = new Property(2, String.class, "producerName", false, "PRODUCER_NAME");
        public final static Property ProducerImageURL = new Property(3, String.class, "producerImageURL", false, "PRODUCER_IMAGE_URL");
        public final static Property ProducerLocation = new Property(4, String.class, "producerLocation", false, "PRODUCER_LOCATION");
        public final static Property ProducerDescription = new Property(5, String.class, "producerDescription", false, "PRODUCER_DESCRIPTION");
    };


    public ProducerDataDao(DaoConfig config) {
        super(config);
    }
    
    public ProducerDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCER_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PRODUCER_ID' INTEGER NOT NULL UNIQUE ," + // 1: producerId
                "'PRODUCER_NAME' TEXT," + // 2: producerName
                "'PRODUCER_IMAGE_URL' TEXT," + // 3: producerImageURL
                "'PRODUCER_LOCATION' TEXT," + // 4: producerLocation
                "'PRODUCER_DESCRIPTION' TEXT);"); // 5: producerDescription
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCER_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProducerData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProducerId());
 
        String producerName = entity.getProducerName();
        if (producerName != null) {
            stmt.bindString(3, producerName);
        }
 
        String producerImageURL = entity.getProducerImageURL();
        if (producerImageURL != null) {
            stmt.bindString(4, producerImageURL);
        }
 
        String producerLocation = entity.getProducerLocation();
        if (producerLocation != null) {
            stmt.bindString(5, producerLocation);
        }
 
        String producerDescription = entity.getProducerDescription();
        if (producerDescription != null) {
            stmt.bindString(6, producerDescription);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProducerData readEntity(Cursor cursor, int offset) {
        ProducerData entity = new ProducerData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // producerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // producerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // producerImageURL
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // producerLocation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // producerDescription
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProducerData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProducerId(cursor.getLong(offset + 1));
        entity.setProducerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProducerImageURL(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProducerLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProducerDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProducerData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProducerData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
